main :THEORY
 BEGIN IMPORTING pilldispenser_th, conversions

  init(x: real): execState =
    LET precompile = act_key1(init_pillbox(0)),
        precompile = act_key2(init_pillbox(0)),
        precompile = act_key3(init_pillbox(0))
     IN init_pillbox(0)

  autocomplete_password(st: state): state =
    IF mode(st) = pwd OR mode(st) = db_pwd THEN
      st
        WITH [field
                := LAMBDA (x: fields_type):
                     COND x = password ->
                            (# visible := TRUE,
                               selected := FALSE,
                               entered := TRUE #),
                          ELSE -> st`field(x)
                     ENDCOND]
    ELSE st ENDIF

  autocomplete_new_patient_details(st: state): state =
    IF mode(st) = new_patient_details THEN
      st
        WITH [field
                := LAMBDA (x: fields_type):
                     COND x = name ->
                            field(st)(name) WITH [entered := TRUE],
                          x = dob -> field(st)(dob) WITH [entered := TRUE],
                          x = id_card ->
                            field(st)(id_card) WITH [entered := TRUE],
                          x = carer ->
                            field(st)(carer) WITH [entered := TRUE],
                          x = mob -> field(st)(mob) WITH [entered := TRUE],
			  ELSE -> field(st)(x)
                     ENDCOND]
    ELSE st ENDIF
  
  autocomplete_new_medicine(st: state): state =
    IF mode(st) = new_med THEN
      st WITH [field := LAMBDA(x:fields_type):
          COND x = medicine -> field(st)(medicine) WITH [ entered := TRUE ],
               x = dosage -> field(st)(dosage) WITH [ entered := TRUE ],
               x = validity -> field(st)(validity) WITH [ entered := TRUE ],
	       x = quantity -> field(st)(quantity) WITH [ entered := TRUE ],
               x = column -> field(st)(column) WITH [ entered := TRUE ],
	       ELSE -> field(st)(x)
	  ENDCOND ]
    ELSE st ENDIF

  autocomplete(st: state): state =
    autocomplete_new_medicine(autocomplete_new_patient_details(st))
  


  %-- APIS
  click_key1(st: state): execState =
    COND
      per_act_key1(st) -> act_key1(st),
      ELSE -> st
    ENDCOND
  click_key2(st: state): execState =
    COND
      per_act_key2(st) -> autocomplete_password(act_key2(st)),
      ELSE -> st
    ENDCOND
  click_key3(st: state): execState =
    COND
      per_act_key3(st) -> autocomplete_password(act_key3(st)),
      ELSE -> st
    ENDCOND
  click_confirm(st: state): execState =
      COND per_act_confirm(st) -> act_confirm(st),
           ELSE -> st
      ENDCOND
  click_quit(st: state): execState =
      COND per_act_quit(st) -> act_quit(st),
           ELSE -> st
      ENDCOND
  click_create(st: state): execState =
    COND
      per_act_create(st) -> autocomplete(act_create(st)),
      ELSE -> st
    ENDCOND
  tap_fingerprint_scanner(st: state): execState =
    COND
      mode(st) = scan -> scan_enabled_screen(st),
      ELSE -> st
    ENDCOND
  tick(st: state): execState =
    COND
      mode(st) = scan_enabled -> act(tick, st),
      ELSE -> st
    ENDCOND

  click_medicines(st: state): execState =
    COND
      per_act_medicines(st) -> act_medicines(st),
      ELSE -> st
    ENDCOND

 END main
