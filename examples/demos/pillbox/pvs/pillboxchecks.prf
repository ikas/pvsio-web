(pillbox_checks
 (state_extension 0
  (state_extension-1 nil 3698137489
   ("" (grind) (("" (apply-extensionality) nil nil)) nil)
   ((available_actions_type type-eq-decl nil pd_t_and_c_th nil)
    (available_fields_type type-eq-decl nil pd_t_and_c_th nil)
    (med_db_type type-eq-decl nil pd_t_and_c_th nil)
    (med_id_line_type type-eq-decl nil pd_t_and_c_th nil)
    (mode_type type-decl nil pd_t_and_c_th nil)
    (m_index type-eq-decl nil pd_t_and_c_th nil)
    (patient_db_type type-eq-decl nil pd_t_and_c_th nil)
    (patient_id_line_type type-eq-decl nil pd_t_and_c_th nil)
    (p_index type-eq-decl nil pd_t_and_c_th nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (max_scan const-decl "posnat" pd_t_and_c_th nil)
    (script_db_type type-eq-decl nil pd_t_and_c_th nil)
    (script_line_type type-eq-decl nil pd_t_and_c_th nil)
    (s_index type-eq-decl nil pd_t_and_c_th nil)
    (state type-eq-decl nil pilldispenser_th nil))
   shostak))
 (first_check 0
  (first_check-1 nil 3697526708
   ("" (skosimp*)
    (("" (split) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
    nil)
   ((per_act_key1 const-decl "boolean" pilldispenser_th nil)
    (per_act_key2 const-decl "boolean" pilldispenser_th nil)
    (clear_screen const-decl "state" pilldispenser_th nil)
    (pwd_screen const-decl "state" pilldispenser_th nil)
    (frame_depth const-decl "posnat" pd_t_and_c_th nil)
    (patient_list_screen const-decl "state" pilldispenser_th nil)
    (act_key2 const-decl "state" pilldispenser_th nil)
    (per_act_key3 const-decl "boolean" pilldispenser_th nil)
    (per_act_medicines const-decl "boolean" pilldispenser_th nil)
    (per_act_prescriptions const-decl "boolean" pilldispenser_th nil)
    (per_act_create const-decl "boolean" pilldispenser_th nil)
    (/= const-decl "boolean" notequal nil)
    (per_act_confirm const-decl "boolean" pilldispenser_th nil)
    (per_act_quit const-decl "boolean" pilldispenser_th nil)
    (act const-decl "state" pilldispenser_th nil)
    (init? const-decl "bool" pilldispenser_th nil)
    (db_pwd_screen const-decl "state" pilldispenser_th nil)
    (db_med_list_screen const-decl "state" pilldispenser_th nil)
    (db_menu_screen const-decl "state" pilldispenser_th nil)
    (act_key3 const-decl "state" pilldispenser_th nil))
   shostak))
 (second_check 0
  (second_check-1 nil 3697885879
   ("" (skosimp*)
    (("" (expand "pwd_screen")
      (("" (split)
        (("1" (expand "select")
          (("1" (expand "act")
            (("1" (lift-if)
              (("1" (split)
                (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (grind) nil nil) ("3" (grind) nil nil))
        nil))
      nil))
    nil)
   ((pwd_screen const-decl "state" pilldispenser_th nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (act_confirm const-decl "state" pilldispenser_th nil)
    (patient_list_screen const-decl "state" pilldispenser_th nil)
    (frame_depth const-decl "posnat" pd_t_and_c_th nil)
    (per_act_confirm const-decl "boolean" pilldispenser_th nil)
    (per_act_create const-decl "boolean" pilldispenser_th nil)
    (per_act_prescriptions const-decl "boolean" pilldispenser_th nil)
    (per_act_medicines const-decl "boolean" pilldispenser_th nil)
    (enter const-decl "state" pilldispenser_th nil)
    (act_key3 const-decl "state" pilldispenser_th nil)
    (db_pwd_screen const-decl "state" pilldispenser_th nil)
    (per_act_key3 const-decl "boolean" pilldispenser_th nil)
    (per_act_key2 const-decl "boolean" pilldispenser_th nil)
    (clear_screen const-decl "state" pilldispenser_th nil)
    (per_act_key1 const-decl "boolean" pilldispenser_th nil)
    (init_screen const-decl "state" pilldispenser_th nil)
    (act_key1 const-decl "state" pilldispenser_th nil)
    (act const-decl "state" pilldispenser_th nil))
   shostak))
 (check21 0
  (check21-1 nil 3697889128
   ("" (skosimp*)
    (("" (expand "patient_list_screen")
      (("" (flatten)
        (("" (lift-if)
          (("" (split)
            (("1" (split)
              (("1" (grind)
                (("1" (grind)
                  (("1" (grind) (("1" (apply-extensionality) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten) (("2" (grind) nil nil)) nil))
              nil)
             ("2" (split)
              (("1" (expand "select")
                (("1" (expand "act")
                  (("1" (flatten)
                    (("1" (lift-if)
                      (("1" (split)
                        (("1" (expand "per_act_create")
                          (("1" (expand "act_create")
                            (("1" (expand "clear_screen")
                              (("1"
                                (grind)
                                (("1" (apply-extensionality) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (expand "per_act_create")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (expand "select")
                  (("2" (expand "act")
                    (("2" (lift-if)
                      (("2" (split)
                        (("1" (flatten)
                          (("1" (expand "per_act_create")
                            (("1" (expand "act_create")
                              (("1"
                                (expand "clear_screen")
                                (("1"
                                  (grind)
                                  (("1"
                                    (apply-extensionality)
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (expand "per_act_create")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((frame_depth const-decl "posnat" pd_t_and_c_th nil)
    (clear_screen const-decl "state" pilldispenser_th nil)
    (per_act_key1 const-decl "boolean" pilldispenser_th nil)
    (per_act_key2 const-decl "boolean" pilldispenser_th nil)
    (per_act_key3 const-decl "boolean" pilldispenser_th nil)
    (per_act_medicines const-decl "boolean" pilldispenser_th nil)
    (per_act_prescriptions const-decl "boolean" pilldispenser_th nil)
    (per_act_create const-decl "boolean" pilldispenser_th nil)
    (new_patient_details_screen const-decl "state" pilldispenser_th
     nil)
    (act_create const-decl "state" pilldispenser_th nil)
    (act const-decl "state" pilldispenser_th nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (state type-eq-decl nil pilldispenser_th nil)
    (s_index type-eq-decl nil pd_t_and_c_th nil)
    (script_line_type type-eq-decl nil pd_t_and_c_th nil)
    (script_db_type type-eq-decl nil pd_t_and_c_th nil)
    (max_scan const-decl "posnat" pd_t_and_c_th nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (p_index type-eq-decl nil pd_t_and_c_th nil)
    (patient_id_line_type type-eq-decl nil pd_t_and_c_th nil)
    (patient_db_type type-eq-decl nil pd_t_and_c_th nil)
    (m_index type-eq-decl nil pd_t_and_c_th nil)
    (mode_type type-decl nil pd_t_and_c_th nil)
    (med_id_line_type type-eq-decl nil pd_t_and_c_th nil)
    (med_db_type type-eq-decl nil pd_t_and_c_th nil)
    (available_fields_type type-eq-decl nil pd_t_and_c_th nil)
    (available_actions_type type-eq-decl nil pd_t_and_c_th nil)
    (quit adt-constructor-decl "(quit?)" pd_t_and_c_th nil)
    (quit? adt-recognizer-decl "[actions_type -> boolean]"
     pd_t_and_c_th nil)
    (create adt-constructor-decl "(create?)" pd_t_and_c_th nil)
    (create? adt-recognizer-decl "[actions_type -> boolean]"
     pd_t_and_c_th nil)
    (prescriptions adt-constructor-decl "(prescriptions?)"
     pd_t_and_c_th nil)
    (prescriptions? adt-recognizer-decl "[actions_type -> boolean]"
     pd_t_and_c_th nil)
    (actions_type type-decl nil pd_t_and_c_th nil)
    (new_patient_details adt-constructor-decl "(new_patient_details?)"
     pd_t_and_c_th nil)
    (new_patient_details? adt-recognizer-decl "[mode_type -> boolean]"
     pd_t_and_c_th nil)
    (TRUE const-decl "bool" booleans nil)
    (mob adt-constructor-decl "(mob?)" pd_t_and_c_th nil)
    (mob? adt-recognizer-decl "[fields_type -> boolean]" pd_t_and_c_th
     nil)
    (carer adt-constructor-decl "(carer?)" pd_t_and_c_th nil)
    (carer? adt-recognizer-decl "[fields_type -> boolean]"
     pd_t_and_c_th nil)
    (id_card adt-constructor-decl "(id_card?)" pd_t_and_c_th nil)
    (id_card? adt-recognizer-decl "[fields_type -> boolean]"
     pd_t_and_c_th nil)
    (dob adt-constructor-decl "(dob?)" pd_t_and_c_th nil)
    (dob? adt-recognizer-decl "[fields_type -> boolean]" pd_t_and_c_th
     nil)
    (name adt-constructor-decl "(name?)" pd_t_and_c_th nil)
    (name? adt-recognizer-decl "[fields_type -> boolean]" pd_t_and_c_th
           nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (fields_type type-decl nil pd_t_and_c_th nil)
    (slimit const-decl "posnat" pd_t_and_c_th nil)
    (mlimit const-decl "posnat" pd_t_and_c_th nil)
    (FALSE const-decl "bool" booleans nil)
    (plimit const-decl "posnat" pd_t_and_c_th nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (patient_list_screen const-decl "state" pilldispenser_th nil))
   shostak))
 (check21prime_TCC1 0
  (check21prime_TCC1-1 nil 3697977005 ("" (subtype-tcc) nil nil) nil
   nil))
 (check21prime 0
  (check21prime-1 nil 3697977007
   ("" (skosimp*)
    (("" (expand "patient_list_screen")
      (("" (split)
        (("1" (grind)
          (("1" (apply-extensionality) nil nil)
           ("2" (apply-extensionality) nil nil)
           ("3" (apply-extensionality) nil nil))
          nil)
         ("2" (grind)
          (("1" (apply-extensionality) nil nil)
           ("2" (apply-extensionality) nil nil)
           ("3" (apply-extensionality) nil nil))
          nil)
         ("3" (grind)
          (("1" (apply-extensionality) nil nil)
           ("2" (apply-extensionality) nil nil)
           ("3" (apply-extensionality) nil nil))
          nil)
         ("4" (grind) nil nil))
        nil))
      nil))
    nil)
   ((patient_list_screen const-decl "state" pilldispenser_th nil)
    (act_patient const-decl "state" pilldispenser_th nil)
    (patient_details_screen const-decl "state" pilldispenser_th nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (per_act_medicines const-decl "boolean" pilldispenser_th nil)
    (per_act_prescriptions const-decl "boolean" pilldispenser_th nil)
    (per_act_create const-decl "boolean" pilldispenser_th nil)
    (new_patient_details_screen const-decl "state" pilldispenser_th
     nil)
    (act_create const-decl "state" pilldispenser_th nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (quit adt-constructor-decl "(quit?)" pd_t_and_c_th nil)
    (quit? adt-recognizer-decl "[actions_type -> boolean]"
     pd_t_and_c_th nil)
    (create adt-constructor-decl "(create?)" pd_t_and_c_th nil)
    (create? adt-recognizer-decl "[actions_type -> boolean]"
     pd_t_and_c_th nil)
    (prescriptions adt-constructor-decl "(prescriptions?)"
     pd_t_and_c_th nil)
    (prescriptions? adt-recognizer-decl "[actions_type -> boolean]"
     pd_t_and_c_th nil)
    (new_patient_details adt-constructor-decl "(new_patient_details?)"
     pd_t_and_c_th nil)
    (new_patient_details? adt-recognizer-decl "[mode_type -> boolean]"
     pd_t_and_c_th nil)
    (TRUE const-decl "bool" booleans nil)
    (mob adt-constructor-decl "(mob?)" pd_t_and_c_th nil)
    (mob? adt-recognizer-decl "[fields_type -> boolean]" pd_t_and_c_th
     nil)
    (carer adt-constructor-decl "(carer?)" pd_t_and_c_th nil)
    (carer? adt-recognizer-decl "[fields_type -> boolean]"
     pd_t_and_c_th nil)
    (id_card adt-constructor-decl "(id_card?)" pd_t_and_c_th nil)
    (id_card? adt-recognizer-decl "[fields_type -> boolean]"
     pd_t_and_c_th nil)
    (dob adt-constructor-decl "(dob?)" pd_t_and_c_th nil)
    (dob? adt-recognizer-decl "[fields_type -> boolean]" pd_t_and_c_th
     nil)
    (name adt-constructor-decl "(name?)" pd_t_and_c_th nil)
    (name? adt-recognizer-decl "[fields_type -> boolean]" pd_t_and_c_th
           nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (per_act_key2 const-decl "boolean" pilldispenser_th nil)
    (per_act_key3 const-decl "boolean" pilldispenser_th nil)
    (db_menu_screen const-decl "state" pilldispenser_th nil)
    (act_key3 const-decl "state" pilldispenser_th nil)
    (medicines adt-constructor-decl "(medicines?)" pd_t_and_c_th nil)
    (medicines? adt-recognizer-decl "[actions_type -> boolean]"
     pd_t_and_c_th nil)
    (db_menu adt-constructor-decl "(db_menu?)" pd_t_and_c_th nil)
    (db_menu? adt-recognizer-decl "[mode_type -> boolean]"
     pd_t_and_c_th nil)
    (frame_depth const-decl "posnat" pd_t_and_c_th nil)
    (clear_screen const-decl "state" pilldispenser_th nil)
    (per_act_key1 const-decl "boolean" pilldispenser_th nil)
    (init_screen const-decl "state" pilldispenser_th nil)
    (act_key1 const-decl "state" pilldispenser_th nil)
    (act const-decl "state" pilldispenser_th nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (state type-eq-decl nil pilldispenser_th nil)
    (s_index type-eq-decl nil pd_t_and_c_th nil)
    (script_line_type type-eq-decl nil pd_t_and_c_th nil)
    (script_db_type type-eq-decl nil pd_t_and_c_th nil)
    (max_scan const-decl "posnat" pd_t_and_c_th nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (p_index type-eq-decl nil pd_t_and_c_th nil)
    (patient_id_line_type type-eq-decl nil pd_t_and_c_th nil)
    (patient_db_type type-eq-decl nil pd_t_and_c_th nil)
    (m_index type-eq-decl nil pd_t_and_c_th nil)
    (mode_type type-decl nil pd_t_and_c_th nil)
    (med_id_line_type type-eq-decl nil pd_t_and_c_th nil)
    (med_db_type type-eq-decl nil pd_t_and_c_th nil)
    (available_fields_type type-eq-decl nil pd_t_and_c_th nil)
    (available_actions_type type-eq-decl nil pd_t_and_c_th nil)
    (key3 adt-constructor-decl "(key3?)" pd_t_and_c_th nil)
    (key3? adt-recognizer-decl "[actions_type -> boolean]"
     pd_t_and_c_th nil)
    (key2 adt-constructor-decl "(key2?)" pd_t_and_c_th nil)
    (key2? adt-recognizer-decl "[actions_type -> boolean]"
     pd_t_and_c_th nil)
    (key1 adt-constructor-decl "(key1?)" pd_t_and_c_th nil)
    (key1? adt-recognizer-decl "[actions_type -> boolean]"
     pd_t_and_c_th nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (actions_type type-decl nil pd_t_and_c_th nil)
    (initial adt-constructor-decl "(initial?)" pd_t_and_c_th nil)
    (initial? adt-recognizer-decl "[mode_type -> boolean]"
     pd_t_and_c_th nil)
    (fields_type type-decl nil pd_t_and_c_th nil)
    (slimit const-decl "posnat" pd_t_and_c_th nil)
    (mlimit const-decl "posnat" pd_t_and_c_th nil)
    (FALSE const-decl "bool" booleans nil)
    (plimit const-decl "posnat" pd_t_and_c_th nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak))
 (entering_field_npd_lemma 0
  (entering_field_npd_lemma-1 nil 3698061613
   ("" (skosimp*) (("" (grind) nil nil)) nil)
   ((new_patient_details_screen const-decl "state" pilldispenser_th
     nil)
    (clear_screen const-decl "state" pilldispenser_th nil)
    (enter const-decl "state" pilldispenser_th nil))
   shostak))
 (check211_TCC1 0
  (check211_TCC1-1 nil 3698049975 ("" (subtype-tcc) nil nil) nil nil))
 (check211_TCC2 0
  (check211_TCC2-1 nil 3698049975 ("" (subtype-tcc) nil nil) nil nil))
 (check211 0
  (check211-1 nil 3698049977
   ("" (skosimp*)
    (("" (expand "new_patient_details_screen")
      (("" (split)
        (("1" (grind) nil nil) ("2" (grind) nil nil)
         ("3" (grind) nil nil)
         ("4" (all-typepreds)
          (("4" (grind)
            (("4"
              (name "st4" "st!1
          WITH [new_patient_record
                  := LAMBDA (x: fields_type):
                       IF (    (x = name) OR (x = dob) OR (x = id_card)
                            OR (x = carer) OR (x = mob))
                         THEN (# visible := TRUE,
                                 selected := FALSE,
                                 entered := TRUE #)
                       ELSE (# visible := FALSE,
                               selected := FALSE,
                               entered := FALSE #)
                       ENDIF,
                p_max := 1 + p_max(st!1),
                scan_counter := 2,
                patient_id_line := LAMBDA (x: p_index): FALSE,
                med_id_line := LAMBDA (x: m_index): FALSE,
                script_line := LAMBDA (x: s_index): FALSE,
                field
                  := LAMBDA (x: fields_type):
                       (# visible := FALSE,
                          selected := FALSE,
                          entered := FALSE #),
                mode := scan,
                action := LAMBDA (x: actions_type): x = scan_action]")
              (("4" (replace -1 1)
                (("4"
                  (name "st3" "st!1
         WITH [patient_id_line := LAMBDA (x: p_index): FALSE,
               med_id_line := LAMBDA (x: m_index): FALSE,
               script_line := LAMBDA (x: s_index): FALSE,
               field
                 := LAMBDA (x: fields_type):
                      (# visible := FALSE,
                         selected := FALSE,
                         entered := FALSE #),
               mode := scan,
               action := LAMBDA (x: actions_type): x = scan_action,
               scan_counter := 2,
               p_max := 1 + st!1`p_max,
               new_patient_record
                 := LAMBDA (x_1: fields_type):
                      IF x_1 = mob
                        THEN (# visible := TRUE,
                                selected := FALSE,
                                entered := TRUE #)
                      ELSE IF x_1 = carer
                             THEN (# visible := TRUE,
                                     selected := FALSE,
                                     entered := TRUE #)
                           ELSE IF x_1 = id_card
                                  THEN (# visible := TRUE,
                                          selected := FALSE,
                                          entered := TRUE #)
                                ELSE IF x_1 = dob
                                     THEN (# visible := TRUE,
                                             selected := FALSE,
                                             entered := TRUE #)
                                     ELSE IF x_1 = name
                                          THEN (# visible := TRUE,
                                                  selected := FALSE,
                                                  entered := TRUE #)
                                          ELSE (# visible := FALSE,
                                                  selected := FALSE,
                                                  entered := FALSE #)
                                          ENDIF
                                     ENDIF
                                ENDIF
                           ENDIF
                      ENDIF]")
                  (("4" (replace -1 1)
                    (("4" (lemma "state_extension")
                      (("4" (inst? :subst (st1 st3 st2 st4))
                        (("4" (grind)
                          (("4"
                            (extensionality "[fields_type -> field_status_type]")
                            (("4" (expand "st3")
                              (("4"
                                (expand "st4")
                                (("4"
                                  (hide 2)
                                  (("4" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("5" (grind) nil nil))
        nil))
      nil))
    nil)
   ((clear_screen const-decl "state" pilldispenser_th nil)
    (per_act_key1 const-decl "boolean" pilldispenser_th nil)
    (init_screen const-decl "state" pilldispenser_th nil)
    (act_key1 const-decl "state" pilldispenser_th nil)
    (act const-decl "state" pilldispenser_th nil)
    (per_act_key2 const-decl "boolean" pilldispenser_th nil)
    (frame_depth const-decl "posnat" pd_t_and_c_th nil)
    (patient_list_screen const-decl "state" pilldispenser_th nil)
    (act_key2 const-decl "state" pilldispenser_th nil)
    (plimit const-decl "posnat" pd_t_and_c_th nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (per_act_key3 const-decl "boolean" pilldispenser_th nil)
    (db_menu_screen const-decl "state" pilldispenser_th nil)
    (act_key3 const-decl "state" pilldispenser_th nil)
    (act_confirm const-decl "state" pilldispenser_th nil)
    (scan_screen const-decl "state" pilldispenser_th nil)
    (next_pid const-decl "p_index" pilldispenser_th nil)
    (per_act_confirm const-decl "boolean" pilldispenser_th nil)
    (per_act_create const-decl "boolean" pilldispenser_th nil)
    (per_act_prescriptions const-decl "boolean" pilldispenser_th nil)
    (per_act_medicines const-decl "boolean" pilldispenser_th nil)
    (enter const-decl "state" pilldispenser_th nil)
    (trichotomous? const-decl "bool" orders nil)
    (strict_order? const-decl "bool" orders nil)
    (transitive? const-decl "bool" relations nil)
    (irreflexive? const-decl "bool" relations nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (field_status_type type-eq-decl nil pd_t_and_c_th nil)
    (state_extension formula-decl nil pillbox_checks nil)
    (scan_action adt-constructor-decl "(scan_action?)" pd_t_and_c_th
     nil)
    (scan_action? adt-recognizer-decl "[actions_type -> boolean]"
     pd_t_and_c_th nil)
    (actions_type type-decl nil pd_t_and_c_th nil)
    (scan adt-constructor-decl "(scan?)" pd_t_and_c_th nil)
    (scan? adt-recognizer-decl "[mode_type -> boolean]" pd_t_and_c_th
     nil)
    (slimit const-decl "posnat" pd_t_and_c_th nil)
    (mlimit const-decl "posnat" pd_t_and_c_th nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (FALSE const-decl "bool" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (mob adt-constructor-decl "(mob?)" pd_t_and_c_th nil)
    (mob? adt-recognizer-decl "[fields_type -> boolean]" pd_t_and_c_th
     nil)
    (carer adt-constructor-decl "(carer?)" pd_t_and_c_th nil)
    (carer? adt-recognizer-decl "[fields_type -> boolean]"
     pd_t_and_c_th nil)
    (id_card adt-constructor-decl "(id_card?)" pd_t_and_c_th nil)
    (id_card? adt-recognizer-decl "[fields_type -> boolean]"
     pd_t_and_c_th nil)
    (dob adt-constructor-decl "(dob?)" pd_t_and_c_th nil)
    (dob? adt-recognizer-decl "[fields_type -> boolean]" pd_t_and_c_th
     nil)
    (name adt-constructor-decl "(name?)" pd_t_and_c_th nil)
    (name? adt-recognizer-decl "[fields_type -> boolean]" pd_t_and_c_th
           nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (fields_type type-decl nil pd_t_and_c_th nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (even? const-decl "bool" integers nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_total_order? const-decl "bool" orders nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (odd? const-decl "bool" integers nil)
    (state type-eq-decl nil pilldispenser_th nil)
    (s_index type-eq-decl nil pd_t_and_c_th nil)
    (script_line_type type-eq-decl nil pd_t_and_c_th nil)
    (script_db_type type-eq-decl nil pd_t_and_c_th nil)
    (max_scan const-decl "posnat" pd_t_and_c_th nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (p_index type-eq-decl nil pd_t_and_c_th nil)
    (patient_id_line_type type-eq-decl nil pd_t_and_c_th nil)
    (patient_db_type type-eq-decl nil pd_t_and_c_th nil)
    (m_index type-eq-decl nil pd_t_and_c_th nil)
    (mode_type type-decl nil pd_t_and_c_th nil)
    (med_id_line_type type-eq-decl nil pd_t_and_c_th nil)
    (med_db_type type-eq-decl nil pd_t_and_c_th nil)
    (available_fields_type type-eq-decl nil pd_t_and_c_th nil)
    (available_actions_type type-eq-decl nil pd_t_and_c_th nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (per_act_quit const-decl "boolean" pilldispenser_th nil)
    (act_quit const-decl "state" pilldispenser_th nil)
    (new_patient_details_screen const-decl "state" pilldispenser_th
     nil))
   shostak))
 (check212 0
  (check212-1 nil 3698154607
   ("" (skosimp*)
    (("" (expand "patient_details_screen")
      (("" (split)
        (("1" (grind) nil nil) ("2" (grind) nil nil)
         ("3" (grind) nil nil) ("4" (grind) nil nil)
         ("5" (grind) nil nil))
        nil))
      nil))
    nil)
   ((patient_details_screen const-decl "state" pilldispenser_th nil)
    (act_quit const-decl "state" pilldispenser_th nil)
    (per_act_quit const-decl "boolean" pilldispenser_th nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plimit const-decl "posnat" pd_t_and_c_th nil)
    (act_prescriptions const-decl "state" pilldispenser_th nil)
    (script_list_screen const-decl "state" pilldispenser_th nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (act_confirm const-decl "state" pilldispenser_th nil)
    (patient_list_screen const-decl "state" pilldispenser_th nil)
    (frame_depth const-decl "posnat" pd_t_and_c_th nil)
    (per_act_confirm const-decl "boolean" pilldispenser_th nil)
    (per_act_create const-decl "boolean" pilldispenser_th nil)
    (per_act_prescriptions const-decl "boolean" pilldispenser_th nil)
    (per_act_medicines const-decl "boolean" pilldispenser_th nil)
    (enter const-decl "state" pilldispenser_th nil)
    (act_key3 const-decl "state" pilldispenser_th nil)
    (db_menu_screen const-decl "state" pilldispenser_th nil)
    (per_act_key3 const-decl "boolean" pilldispenser_th nil)
    (per_act_key2 const-decl "boolean" pilldispenser_th nil)
    (act const-decl "state" pilldispenser_th nil)
    (act_key1 const-decl "state" pilldispenser_th nil)
    (init_screen const-decl "state" pilldispenser_th nil)
    (per_act_key1 const-decl "boolean" pilldispenser_th nil)
    (clear_screen const-decl "state" pilldispenser_th nil))
   shostak))
 (check2111_TCC1 0
  (check2111_TCC1-1 nil 3698411321 ("" (subtype-tcc) nil nil) nil nil))
 (check2111 0
  (check2111-1 nil 3698410971
   ("" (skosimp*) (("" (grind) nil nil)) nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (scan_screen const-decl "state" pilldispenser_th nil)
    (act const-decl "state" pilldispenser_th nil)
    (per_act_quit const-decl "boolean" pilldispenser_th nil)
    (per_act_confirm const-decl "boolean" pilldispenser_th nil)
    (/= const-decl "boolean" notequal nil)
    (scan_enabled_screen const-decl "state" pilldispenser_th nil)
    (clear_screen const-decl "state" pilldispenser_th nil)
    (per_act_create const-decl "boolean" pilldispenser_th nil)
    (per_act_prescriptions const-decl "boolean" pilldispenser_th nil)
    (per_act_medicines const-decl "boolean" pilldispenser_th nil)
    (per_act_key3 const-decl "boolean" pilldispenser_th nil)
    (per_act_key2 const-decl "boolean" pilldispenser_th nil)
    (per_act_key1 const-decl "boolean" pilldispenser_th nil))
   shostak))
 (check21111 0
  (check21111-1 nil 3698411846
   ("" (skosimp*) (("" (grind) nil nil)) nil)
   ((scan_enabled_screen const-decl "state" pilldispenser_th nil)
    (act const-decl "state" pilldispenser_th nil)
    (per_act_quit const-decl "boolean" pilldispenser_th nil)
    (scan_successful_screen const-decl "state" pilldispenser_th nil)
    (per_act_confirm const-decl "boolean" pilldispenser_th nil)
    (scan_screen const-decl "state" pilldispenser_th nil)
    (clear_screen const-decl "state" pilldispenser_th nil)
    (/= const-decl "boolean" notequal nil)
    (per_act_create const-decl "boolean" pilldispenser_th nil)
    (per_act_prescriptions const-decl "boolean" pilldispenser_th nil)
    (per_act_medicines const-decl "boolean" pilldispenser_th nil)
    (per_act_key3 const-decl "boolean" pilldispenser_th nil)
    (per_act_key2 const-decl "boolean" pilldispenser_th nil)
    (per_act_key1 const-decl "boolean" pilldispenser_th nil))
   shostak))
 (check211111 0
  (check211111-1 nil 3698470701 ("" (grind) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (plimit const-decl "posnat" pd_t_and_c_th nil)
    (clear_screen const-decl "state" pilldispenser_th nil)
    (scan_successful_screen const-decl "state" pilldispenser_th nil)
    (per_act_key1 const-decl "boolean" pilldispenser_th nil)
    (per_act_key2 const-decl "boolean" pilldispenser_th nil)
    (per_act_key3 const-decl "boolean" pilldispenser_th nil)
    (per_act_medicines const-decl "boolean" pilldispenser_th nil)
    (per_act_prescriptions const-decl "boolean" pilldispenser_th nil)
    (per_act_create const-decl "boolean" pilldispenser_th nil)
    (per_act_confirm const-decl "boolean" pilldispenser_th nil)
    (per_act_quit const-decl "boolean" pilldispenser_th nil)
    (frame_depth const-decl "posnat" pd_t_and_c_th nil)
    (patient_list_screen const-decl "state" pilldispenser_th nil)
    (act_quit const-decl "state" pilldispenser_th nil)
    (act const-decl "state" pilldispenser_th nil))
   shostak))
 (check2121_TCC1 0
  (check2121_TCC1-1 nil 3698496850 ("" (subtype-tcc) nil nil) nil nil))
 (check2121_TCC2 0
  (check2121_TCC2-1 nil 3698503905 ("" (subtype-tcc) nil nil) nil nil))
 (check2121_TCC3 0
  (check2121_TCC3-1 nil 3698503905 ("" (subtype-tcc) nil nil) nil nil))
 (check2121 0
  (check2121-1 nil 3698496852
   ("" (skosimp*)
    (("" (expand "script_list_screen")
      (("" (split)
        (("1" (grind) nil nil) ("2" (grind) nil nil)
         ("3" (grind) nil nil) ("4" (grind) nil nil)
         ("5" (grind) nil nil))
        nil))
      nil))
    nil)
   ((frame_depth const-decl "posnat" pd_t_and_c_th nil)
    (clear_screen const-decl "state" pilldispenser_th nil)
    (per_act_key1 const-decl "boolean" pilldispenser_th nil)
    (init_screen const-decl "state" pilldispenser_th nil)
    (act_key1 const-decl "state" pilldispenser_th nil)
    (act const-decl "state" pilldispenser_th nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (per_act_key2 const-decl "boolean" pilldispenser_th nil)
    (per_act_key3 const-decl "boolean" pilldispenser_th nil)
    (db_menu_screen const-decl "state" pilldispenser_th nil)
    (act_key3 const-decl "state" pilldispenser_th nil)
    (per_act_medicines const-decl "boolean" pilldispenser_th nil)
    (per_act_prescriptions const-decl "boolean" pilldispenser_th nil)
    (per_act_create const-decl "boolean" pilldispenser_th nil)
    (db_med_list_screen const-decl "state" pilldispenser_th nil)
    (act_create const-decl "state" pilldispenser_th nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (per_act_confirm const-decl "boolean" pilldispenser_th nil)
    (per_act_quit const-decl "boolean" pilldispenser_th nil)
    (act_quit const-decl "state" pilldispenser_th nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (slimit const-decl "posnat" pd_t_and_c_th nil)
    (s_index type-eq-decl nil pd_t_and_c_th nil)
    (script_details_screen const-decl "state" pilldispenser_th nil)
    (act_script const-decl "state" pilldispenser_th nil)
    (script_list_screen const-decl "state" pilldispenser_th nil))
   shostak))
 (check21211 0
  (check21211-1 nil 3698654727
   ("" (skosimp*)
    (("" (expand "script_details_screen")
      (("" (split)
        (("1" (grind) nil nil)
         ("2" (expand "select")
          (("2" (lift-if)
            (("2" (split)
              (("1" (flatten)
                (("1" (lift-if)
                  (("1" (split)
                    (("1" (flatten)
                      (("1" (expand "act")
                        (("1" (lift-if)
                          (("1" (split)
                            (("1" (flatten)
                              (("1"
                                (expand "act_key3")
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (split)
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (split)
                                        (("1"
                                          (flatten)
                                          (("1" (grind) nil nil))
                                          nil)
                                         ("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil)
         ("3" (flatten)
          (("3" (lift-if)
            (("3" (split)
              (("1" (flatten)
                (("1" (grind) (("1" (postpone) nil nil)) nil)) nil)
               ("2" (postpone) nil nil))
              nil))
            nil))
          nil)
         ("4" (postpone) nil nil) ("5" (postpone) nil nil))
        nil))
      nil))
    nil)
   nil shostak))
 (third_check 0
  (third_check-1 nil 3697887615
   ("" (skosimp*)
    (("" (expand "db_pwd_screen")
      (("" (split)
        (("1" (expand "select")
          (("1" (expand "act")
            (("1" (lift-if)
              (("1" (split)
                (("1" (flatten)
                  (("1" (expand "act_key1") (("1" (grind) nil nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "select")
          (("2" (expand "act")
            (("2" (lift-if)
              (("2" (split)
                (("1" (flatten)
                  (("1" (expand "act_key2") (("1" (grind) nil nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (expand "per_act_key2")
                    (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (expand "select")
          (("3" (lift-if)
            (("3" (split)
              (("1" (flatten) (("1" (grind) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((act const-decl "state" pilldispenser_th nil)
    (act_key1 const-decl "state" pilldispenser_th nil)
    (init_screen const-decl "state" pilldispenser_th nil)
    (per_act_key1 const-decl "boolean" pilldispenser_th nil)
    (clear_screen const-decl "state" pilldispenser_th nil)
    (act_key2 const-decl "state" pilldispenser_th nil)
    (pwd_screen const-decl "state" pilldispenser_th nil)
    (per_act_key2 const-decl "boolean" pilldispenser_th nil)
    (enter const-decl "state" pilldispenser_th nil)
    (per_act_key3 const-decl "boolean" pilldispenser_th nil)
    (per_act_medicines const-decl "boolean" pilldispenser_th nil)
    (per_act_prescriptions const-decl "boolean" pilldispenser_th nil)
    (per_act_create const-decl "boolean" pilldispenser_th nil)
    (per_act_confirm const-decl "boolean" pilldispenser_th nil)
    (db_menu_screen const-decl "state" pilldispenser_th nil)
    (act_confirm const-decl "state" pilldispenser_th nil)
    (db_pwd_screen const-decl "state" pilldispenser_th nil))
   shostak))
 (check31 0
  (check31-1 nil 3697969838
   ("" (skosimp*)
    (("" (expand "db_menu_screen")
      (("" (split)
        (("1" (grind) nil nil) ("2" (grind) nil nil)
         ("3" (grind) nil nil))
        nil))
      nil))
    nil)
   ((db_menu_screen const-decl "state" pilldispenser_th nil)
    (per_act_key3 const-decl "boolean" pilldispenser_th nil)
    (per_act_medicines const-decl "boolean" pilldispenser_th nil)
    (db_med_list_screen const-decl "state" pilldispenser_th nil)
    (act_medicines const-decl "state" pilldispenser_th nil)
    (per_act_key2 const-decl "boolean" pilldispenser_th nil)
    (frame_depth const-decl "posnat" pd_t_and_c_th nil)
    (patient_list_screen const-decl "state" pilldispenser_th nil)
    (act_key2 const-decl "state" pilldispenser_th nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (act const-decl "state" pilldispenser_th nil)
    (act_key1 const-decl "state" pilldispenser_th nil)
    (init_screen const-decl "state" pilldispenser_th nil)
    (per_act_key1 const-decl "boolean" pilldispenser_th nil)
    (clear_screen const-decl "state" pilldispenser_th nil))
   shostak))
 (check311_TCC1 0
  (check311_TCC1-1 nil 3697981246 ("" (subtype-tcc) nil nil) nil nil))
 (check311 0
  (check311-1 nil 3697982112
   ("" (skosimp*)
    (("" (expand "db_med_list_screen")
      (("" (split)
        (("1" (grind)
          (("1" (apply-extensionality) nil nil)
           ("2" (apply-extensionality) nil nil)
           ("3" (apply-extensionality) nil nil))
          nil)
         ("2" (grind)
          (("1" (apply-extensionality) nil nil)
           ("2" (apply-extensionality) nil nil)
           ("3" (apply-extensionality) nil nil)
           ("4" (apply-extensionality) nil nil)
           ("5" (apply-extensionality) nil nil)
           ("6" (apply-extensionality) nil nil))
          nil)
         ("3" (grind)
          (("1" (grind) (("1" (apply-extensionality) nil nil)) nil)
           ("2" (apply-extensionality) nil nil)
           ("3" (apply-extensionality) nil nil))
          nil)
         ("4" (grind) nil nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (plimit const-decl "posnat" pd_t_and_c_th nil)
    (FALSE const-decl "bool" booleans nil)
    (mlimit const-decl "posnat" pd_t_and_c_th nil)
    (slimit const-decl "posnat" pd_t_and_c_th nil)
    (fields_type type-decl nil pd_t_and_c_th nil)
    (initial? adt-recognizer-decl "[mode_type -> boolean]"
     pd_t_and_c_th nil)
    (initial adt-constructor-decl "(initial?)" pd_t_and_c_th nil)
    (actions_type type-decl nil pd_t_and_c_th nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (key1? adt-recognizer-decl "[actions_type -> boolean]"
     pd_t_and_c_th nil)
    (key1 adt-constructor-decl "(key1?)" pd_t_and_c_th nil)
    (key2? adt-recognizer-decl "[actions_type -> boolean]"
     pd_t_and_c_th nil)
    (key2 adt-constructor-decl "(key2?)" pd_t_and_c_th nil)
    (key3? adt-recognizer-decl "[actions_type -> boolean]"
     pd_t_and_c_th nil)
    (key3 adt-constructor-decl "(key3?)" pd_t_and_c_th nil)
    (available_actions_type type-eq-decl nil pd_t_and_c_th nil)
    (available_fields_type type-eq-decl nil pd_t_and_c_th nil)
    (med_db_type type-eq-decl nil pd_t_and_c_th nil)
    (med_id_line_type type-eq-decl nil pd_t_and_c_th nil)
    (mode_type type-decl nil pd_t_and_c_th nil)
    (m_index type-eq-decl nil pd_t_and_c_th nil)
    (patient_db_type type-eq-decl nil pd_t_and_c_th nil)
    (patient_id_line_type type-eq-decl nil pd_t_and_c_th nil)
    (p_index type-eq-decl nil pd_t_and_c_th nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (max_scan const-decl "posnat" pd_t_and_c_th nil)
    (script_db_type type-eq-decl nil pd_t_and_c_th nil)
    (script_line_type type-eq-decl nil pd_t_and_c_th nil)
    (s_index type-eq-decl nil pd_t_and_c_th nil)
    (state type-eq-decl nil pilldispenser_th nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (act const-decl "state" pilldispenser_th nil)
    (act_key1 const-decl "state" pilldispenser_th nil)
    (init_screen const-decl "state" pilldispenser_th nil)
    (per_act_key1 const-decl "boolean" pilldispenser_th nil)
    (clear_screen const-decl "state" pilldispenser_th nil)
    (frame_depth const-decl "posnat" pd_t_and_c_th nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (patient_list? adt-recognizer-decl "[mode_type -> boolean]"
     pd_t_and_c_th nil)
    (patient_list adt-constructor-decl "(patient_list?)" pd_t_and_c_th
     nil)
    (create? adt-recognizer-decl "[actions_type -> boolean]"
     pd_t_and_c_th nil)
    (create adt-constructor-decl "(create?)" pd_t_and_c_th nil)
    (act_key2 const-decl "state" pilldispenser_th nil)
    (patient_list_screen const-decl "state" pilldispenser_th nil)
    (per_act_key2 const-decl "boolean" pilldispenser_th nil)
    (confirm adt-constructor-decl "(confirm?)" pd_t_and_c_th nil)
    (confirm? adt-recognizer-decl "[actions_type -> boolean]"
     pd_t_and_c_th nil)
    (quit adt-constructor-decl "(quit?)" pd_t_and_c_th nil)
    (quit? adt-recognizer-decl "[actions_type -> boolean]"
     pd_t_and_c_th nil)
    (new_med adt-constructor-decl "(new_med?)" pd_t_and_c_th nil)
    (new_med? adt-recognizer-decl "[mode_type -> boolean]"
     pd_t_and_c_th nil)
    (TRUE const-decl "bool" booleans nil)
    (column adt-constructor-decl "(column?)" pd_t_and_c_th nil)
    (column? adt-recognizer-decl "[fields_type -> boolean]"
     pd_t_and_c_th nil)
    (quantity adt-constructor-decl "(quantity?)" pd_t_and_c_th nil)
    (quantity? adt-recognizer-decl "[fields_type -> boolean]"
     pd_t_and_c_th nil)
    (validity adt-constructor-decl "(validity?)" pd_t_and_c_th nil)
    (validity? adt-recognizer-decl "[fields_type -> boolean]"
     pd_t_and_c_th nil)
    (dosage adt-constructor-decl "(dosage?)" pd_t_and_c_th nil)
    (dosage? adt-recognizer-decl "[fields_type -> boolean]"
     pd_t_and_c_th nil)
    (name adt-constructor-decl "(name?)" pd_t_and_c_th nil)
    (name? adt-recognizer-decl "[fields_type -> boolean]" pd_t_and_c_th
           nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (act_create const-decl "state" pilldispenser_th nil)
    (new_med_screen const-decl "state" pilldispenser_th nil)
    (per_act_create const-decl "boolean" pilldispenser_th nil)
    (per_act_prescriptions const-decl "boolean" pilldispenser_th nil)
    (per_act_medicines const-decl "boolean" pilldispenser_th nil)
    (per_act_key3 const-decl "boolean" pilldispenser_th nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (db_med_details_screen const-decl "state" pilldispenser_th nil)
    (act_med const-decl "state" pilldispenser_th nil)
    (db_med_list_screen const-decl "state" pilldispenser_th nil))
   shostak)))

